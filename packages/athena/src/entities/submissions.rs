//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "submissions"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub beatmapset_id: i32,
    pub submitter_id: i32,
    pub game_mode: i16,
    pub submitted_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    BeatmapsetId,
    SubmitterId,
    GameMode,
    SubmittedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Beatmapsets,
    SubmissionReviews,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::BeatmapsetId => ColumnType::Integer.def(),
            Self::SubmitterId => ColumnType::Integer.def(),
            Self::GameMode => ColumnType::SmallInteger.def(),
            Self::SubmittedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Beatmapsets => Entity::belongs_to(super::beatmapsets::Entity)
                .from(Column::BeatmapsetId)
                .to(super::beatmapsets::Column::Id)
                .into(),
            Self::SubmissionReviews => Entity::has_many(super::submission_reviews::Entity).into(),
        }
    }
}

impl Related<super::beatmapsets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Beatmapsets.def()
    }
}

impl Related<super::submission_reviews::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubmissionReviews.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
